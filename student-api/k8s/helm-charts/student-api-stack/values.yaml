# Global configuration
global:
  imageRegistry: ""
  storageClass: ""

# Student API application configuration
studentApi:
  enabled: true
  replicaCount: 2
  
  image:
    repository: student-api
    pullPolicy: IfNotPresent
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  env:
    DATABASE_URL: "postgresql://postgres:password@postgres.database.svc.cluster.local:5432/studentdb"
    REDIS_URL: "redis://redis.database.svc.cluster.local:6379"
    FLASK_ENV: "production"

# NGINX Load Balancer configuration
nginx:
  enabled: true
  replicaCount: 2
  
  image:
    repository: nginx
    tag: "1.21-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# Monitoring stack configuration
monitoring:
  enabled: true

# Prometheus and Grafana (using kube-prometheus-stack)
kube-prometheus-stack:
  enabled: true
  
  prometheus:
    prometheusSpec:
      retention: 7d
      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 5Gi
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 200m
          memory: 512Mi
  
  grafana:
    enabled: true
    adminPassword: "admin"
    service:
      type: LoadBalancer
      port: 80
    
    persistence:
      enabled: true
      size: 2Gi
    
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Namespace configuration
namespace:
  create: true
  name: "student-api"
